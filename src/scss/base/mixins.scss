//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url('../fonts/#{$file_name}.woff2') format('woff2'),
      url('../fonts/#{$file_name}.woff') format('woff');
    font-weight: #{$weight};
    font-style: #{$style};
  }
}
//Percent
@function percent($px, $from) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}
//REM
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}
//EM
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}
//Адаптивное свойство

//Currency
@mixin currency($sym) {
  &::after {
    content: '#{$sym}';
  }
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
  display: grid;
  gap: $gap;
  grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

//adaptive value
@mixin adpv(
  //Property for which the value will be set.
  $property,
  //mixin method. (More on that below),
  $method: 1,
  //Max value for property.
  $startValue: 20,
  //Min value for property.
  $endValue: 14,
  //The maximum width value at which the mixin will work.
  $maxWidthContainer: $containerWidth,

  //The minimum width value at which the mixin will work.
  $minWidth: $minWidth
) {
  //========================================================================================
  // METHODS FOR CONTAINER SIZE
  //========================================================================================
  //[1] =====
  //The value of a property does not increase or decrease if:
  //The display width more than the maximum width ($maxWidthContainer) (default: container size)
  //The display width less than the minimum width value. ($minWidth)
  //[2] =====
  //The value of a property does not decrease if:
  //The Screen width less than the minimum width value. ($minWidth)
  //The value of a property does change if:
  //The Screen width less or more than the maximum width value. ($maxWidthContainer) (default: container size)
  //[3] =====
  //The value of a property does not decrease if:
  //The Screen width less than maximum width ($maxWidthContainer) (default: container size)
  //The value of a property does increase if:
  //The Screen width more than maximum width ($maxWidthContainer) (default: container size)
  //In this case, the minimum value corresponds to the specified variable $startValue.
  //========================================================================================
  // METHODS FOR LAYOUT SIZE
  //========================================================================================
  //[4] =====
  //The value of a property does not increase or decrease if:
  //The display width more than the layout size. ($maxWidth)
  //The display width less than the minimum width value. ($minWidth)
  //[5] =====
  //The value of a property does not decrease if:
  //The Screen width less than the minimum width value. ($minWidth)
  //The value of a property does change if:
  //The Screen width less or more than the layout size. ($maxWidth)
  //[6] =====
  //The value of a property does not decrease if:
  //The Screen width less than the layout size. ($maxWidth)
  //The value of a property does increase if:
  //The Screen width more than the layout size. ($maxWidth)
  //In this case, the minimum value corresponds to the specified variable $startValue.
  //========================================================================================
  // END METHODS LIST
  //========================================================================================
  #{$property}: $startValue + px;
  $addSize: $startValue - $endValue;

  //[1] - METHOD
  @if $method==1 {
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$endValue + px} + #{$addSize} * ((100vw - #{$minWidth + px}) / #{$maxWidthContainer - $minWidth})
      );
    }
    @media (max-width: #{$minWidth + px}) {
      #{$property}: #{$endValue + px};
    }
  }
  //[2] - METHOD
  @else if $method==2 {
    #{$property}: calc(
      #{$endValue + px} + #{$addSize} * ((100vw - #{$minWidth + px}) / #{$maxWidthContainer - $minWidth})
    );
    @media (max-width: #{$minWidth + px}) {
      #{$property}: #{$endValue + px};
    }
  }
  //[3] - METHOD
  @else if $method==3 {
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(#{$endValue + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidthContainer - 320}));
    }
  }

  //[4] - METHOD
  @else if $method==4 {
    @media (max-width: #{$maxWidth+ px}) {
      #{$property}: calc(
        #{$endValue + px} + #{$addSize} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth})
      );
    }
    @media (max-width: #{$minWidth + px}) {
      #{$property}: #{$endValue + px};
    }
  }
  //[5] - METHOD
  @else if $method==5 {
    #{$property}: calc(
      #{$endValue + px} + #{$addSize} * ((100vw - #{$minWidth + px}) / #{$maxWidth - $minWidth})
    );
    @media (max-width: #{$minWidth + px}) {
      #{$property}: #{$endValue + px};
    }
  }
  //[6] - METHOD
  @else if $method==6 {
    @media (min-width: #{$maxWidth + px}) {
      #{$property}: calc(#{$endValue + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth - 320}));
    }
  }
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth,
  $keepSize: 0
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;

  // Получение значения свойства
  $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};
  // Если отрицательные значения
  @if ($minSize > $startSize) {
    $propertyValue: #{'clamp(' rem($startSize) ',' $flyValue ',' rem($minSize) ')'};
  }

  // Если поддерживается clamp();
  @supports (#{$property}: $propertyValue) {
    #{$property}: $propertyValue;
  }
  // Если не поддерживается clamp();
  @supports not (#{$property}: $propertyValue) {
    #{$property}: calc(
      #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) -
        math.div($widthTo, 16)}
    );
  }

  // Устанавливаем значения по умолчанию
  @if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
    @media (min-width: $widthFromMedia) {
      #{$property}: inherit;
    }
  }
  @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: inherit;
    }
  }
}
